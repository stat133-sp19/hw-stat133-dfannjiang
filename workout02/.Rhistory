geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Salary (in millions)')
team_points <-
arrange(
summarise(
group_by(dat, team),
total_points = sum(points),
mean_points = mean(points),
median_points = median(points),
desc(total_points)
)
team_points
team_points <-
arrange(
summarise(
group_by(dat, team),
total_points = sum(points),
mean_points = mean(points),
median_points = median(points),
desc(total_points)
))
team_points
as.data.frame(team_points)
ggplot(data=team_salaries, aes(y=total_salary, x=reorder(team, total_salary))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Salary (in millions)', main='NBA Teams Ranked by Total Salary')
ggplot(data=team_salaries, aes(y=total_salary, x=reorder(team, total_salary))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Salary (in millions)', title='NBA Teams Ranked by Total Salary')
ggplot(data=team_points, aes(y=total_points, x=reorder(team, total_points))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Scored Points', title='NBA Teams Ranked by Total Scored Points')
?inner_join
points_salary
points_salary <- (team_points, team_salaries, by=team)
points_salary <- inner_join(team_points, team_salaries, by=team)
points_salary <- inner_join(team_points, team_salaries, by=team_points$team)
points_salary <- inner_join(team_points, team_salaries, by=c('team'))
points_salary
summary(points_salary)
points_salary$cost_point <- total_salary * 1e6 / total_points
?mutate
points_salary <- mutate(points_salary, cost_point=total_salary * 1e6 / total_points)
summary(points_salary$cost_point)
ggplot(data=points_salary, aes(y=cost_point, x=reorder(team, cost_point))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Cost (in dollars) per Point', title='NBA Teams Ranked by Cost per Point')
ggplot(data=team_salaries, aes(y=total_salary, x=reorder(team, total_salary))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Salary (in millions)', title='NBA Teams Ranked by Total Salary') +
geom_vline(xintercept=mean(total_salary))
ggplot(data=team_salaries, aes(y=total_salary, x=reorder(team, total_salary))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Salary (in millions)', title='NBA Teams Ranked by Total Salary') +
geom_vline(xintercept=mean(team_salaries$total_salary))
ggplot(data=team_salaries, aes(y=total_salary, x=reorder(team, total_salary))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Salary (in millions)', title='NBA Teams Ranked by Total Salary') +
geom_hline(xintercept=mean(team_salaries$total_salary))
ggplot(data=team_salaries, aes(y=total_salary, x=reorder(team, total_salary))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Salary (in millions)', title='NBA Teams Ranked by Total Salary') +
geom_hline(yintercept=mean(team_salaries$total_salary))
?geom_hline
ggplot(data=team_salaries, aes(y=total_salary, x=reorder(team, total_salary))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Salary (in millions)', title='NBA Teams Ranked by Total Salary') +
geom_hline(yintercept=mean(team_salaries$total_salary), col='red')
ggplot(data=team_points, aes(y=total_points, x=reorder(team, total_points))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Total Scored Points', title='NBA Teams Ranked by Total Scored Points') +
geom_hline(yintercept=mean(team_points$total_points), col='red')
ggplot(data=points_salary, aes(y=cost_point, x=reorder(team, cost_point))) +
geom_bar(stat='identity') +
coord_flip() +
labs(x='Team', y='Cost (in dollars) per Point', title='NBA Teams Ranked by Cost per Point') +
geom_hline(yintercept=mean(points_salary$cost_point), col='red')
?geom_point
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point))
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point), label=team)
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point, label=team))
?aes
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team))
?geom_text
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team), nudge_y=1)
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team), nudge_y=2)
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team,nudge_y=2))
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team), vjust=2)
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team), vjust=-2)
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team), vjust=-1)
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team), vjust=-.5)
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team), vjust=-.5, check_overlap=T)
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
geom_text(aes(label=team))
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point))
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
labs(x="One NBA team's total salary", y="One NBA team's total points")
ggplot(data=points_salary, aes(x=total_salary, y=total_points)) +
geom_point(aes(colour=cost_point)) +
labs(x="One NBA team's total salary", y="One NBA team's total points", colour='Cost per Point')
a = c(1, 2, 3)
b = c(2, 3)
a == b
sum(a==b)
?apply
?sapply
install.packages("testthat")
head(USArrests)
head(USArrests)
states <- rownames(USArrests)
head(states)
states <- rownames(USArrests)
head(states)
paste(c('Alabama =', 'Alaska =', 'Arizona =','Arkansas =', 'California ='),
c(7, 6, 7, 8, 10))
paste(c('Alabama =', 'Alaska =', 'Arizona =','Arkansas =', 'California ='),
c(7, 6, 7, 8, 10))
states
paste(c('Alabama', 'Alaska', 'Arizona','Arkansas', 'California'), collapse='')
?casefold
factorial(3)
tolower('HI')
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(tolower(to),
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(to,
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
to_celsius <- function(x = 1) {
(x - 32) * (5/9)
}
to_kelvin <- function(x = 1) {
(x + 459.67) * (5/9)
}
to_reaumur <- function(x = 1) {
(x - 32) * (4/9)
}
to_rankine <- function(x = 1) {
x + 459.67
}
temp_convert <- function(x = 1, to = "celsius") {
switch(tolower(to),
"celsius" = to_celsius(x),
"kelvin" = to_kelvin(x),
"reaumur" = to_reaumur(x),
"rankine" = to_rankine(x))
}
temp_convert(30, 'celsius')
temp_convert(30, 'Celsius')
temp_convert(30, 'CELSIUS')
paste0('file', 1:10, '.csv')
paste0('file', 1:10, '.csv')
paste('file', 1:10, '.csv', sep='')
?gsub
files <- paste('file', 1:10, '.csv', sep='')
gsub('file', 'dataset', files)
# name of output file
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("This is the first line", file = outfile)
# insert new line
cat("\n", file = outfile, append = TRUE)
cat("A 2nd line", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = outfile, append = TRUE)
# name of output file
outfile <- "output.txt"
# writing to 'outfile.txt'
cat("This is the first line", file = outfile)
# insert new line
cat("\n", file = outfile, append = TRUE)
cat("A 2nd line", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("\n\n", file = outfile, append = TRUE)
cat("\nThe quick brown fox jumps over the lazy dog\n",
file = outfile, append = TRUE)
# name of output file
outfile <- "output.txt"
# writing to 'outfile.txt'
cat('---', file=outfile)
cat("title: Hello\n", file = outfile, append=T)
# insert new line
cat("author: Dominic Fannjiang\n", file = outfile, append = TRUE)
cat("date: 4/5/19\n", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("output: html_document\n---\n\n", file = outfile, append = TRUE)
cat("This is the first line\n",
file = outfile, append = TRUE)
cat("A 2nd line\n\n",
file = outfile, append = TRUE)
cat('The quick brown fox jumps over the lazy dog',
file=outfile, append=T)
# name of output file
outfile <- "output.txt"
# writing to 'outfile.txt'
cat('---\n', file=outfile)
cat("title: Hello\n", file = outfile, append=T)
# insert new line
cat("author: Dominic Fannjiang\n", file = outfile, append = TRUE)
cat("date: 4/5/19\n", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("output: html_document\n---\n\n", file = outfile, append = TRUE)
cat("This is the first line\n",
file = outfile, append = TRUE)
cat("A 2nd line\n\n",
file = outfile, append = TRUE)
cat('The quick brown fox jumps over the lazy dog',
file=outfile, append=T)
# name of output file
outfile <- "output.txt"
# writing to 'outfile.txt'
cat('---\n', file=outfile)
cat("title: Hello\n", file = outfile, append=T)
# insert new line
cat("author: Dominic Fannjiang\n", file = outfile, append = TRUE)
cat("date: 4/5/19\n", file = "output.txt", append = TRUE)
# insert 2 new lines
cat("output: html_document\n---\n\n", file = outfile, append = TRUE)
cat("This is the first line\n",
file = outfile, append = TRUE)
cat("A 2nd line\n\n\n",
file = outfile, append = TRUE)
cat('The quick brown fox jumps over the lazy dog',
file=outfile, append=T)
colors()
is_color <- function(s) {
return(s %in% colors())
}
is_color('yellow')  # TRUE
is_color('blu')     # FALSE
is_color('turkuoise') # FALSE
factorial(3)*5*5*5
# 7 choose 4
factorial(7)/(factorial(4)*factorial(3))
paste0('file', 1:10, '.csv')
paste('file', 1:10, '.csv', sep='')
paste0(paste0('file', 1:10) '.csv'))
paste0('file', 1:10, '.csv')
paste('file', 1:10, '.csv', sep='')
paste0(paste0('file', 1:10) '.csv')
paste0('file', 1:10, '.csv')
paste('file', 1:10, '.csv', sep='')
paste0(paste0('file', 1:10), '.csv')
shiny::runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
?sliderInput
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
?plotOutput
?h4
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
modalities <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(modalities) <- c("Year", "Value", "Modality")
modalities
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
modalities <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(modalities) <- c("Year", "Value", "Modality")
types = c("No Contribution", "Fixed Contribution", "Growing Contribution")
for (y in 0:input$year) {
fv = future_value(input$initial, input$rate/100, y)
for (i in 1:3) {
t <- types[i]
val <- switch(i,
fv,
fv + annuity(input$contrib, input$rate/100, y),
fv + growing_annuity(input$contrib, input$rate/100, input$growth/100, y)
)
modalities <- rbind(modalities,
c(y, val, t))
}
}
modalities <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(modalities) <- c("Year", "Value", "Modality")
types = c("No Contribution", "Fixed Contribution", "Growing Contribution")
for (y in 0:10) {
fv = future_value(10000,0.05, y)
for (i in 1:3) {
t <- types[i]
val <- switch(i,
fv,
fv + annuity(2000, 0.05, y),
fv + growing_annuity(2000, 0.05, 0.02, y)
)
modalities <- rbind(modalities,
c(y, val, t))
}
}
modalities
modalities <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(modalities) <- c("Year", "Value", "Modality")
modalities
rbind(modalities, c(1, 2, 3))
rbind(modalities, c(1, 2, "3"))
rbind(modalities, c(1, "hihih", "3"))
modalities <- as.data.frame(matrix(ncol = 3, nrow = 0))
colnames(modalities) <- c("Year", "Value", "Modality")
types = c("No Contribution", "Fixed Contribution", "Growing Contribution")
for (y in 0:10) {
fv = future_value(10000,0.05, y)
for (i in 1:3) {
t <- types[i]
val <- switch(i,
fv,
fv + annuity(2000, 0.05, y),
fv + growing_annuity(2000, 0.05, 0.02, y)
)
modalities <- rbind(modalities,
c(y, val, t))
}
}
modalities
modalities <- as.data.frame(matrix(ncol = 3, nrow = 0))
types = c("No Contribution", "Fixed Contribution", "Growing Contribution")
for (y in 0:10) {
fv = future_value(10000,0.05, y)
for (i in 1:3) {
t <- types[i]
val <- switch(i,
fv,
fv + annuity(2000, 0.05, y),
fv + growing_annuity(2000, 0.05, 0.02, y)
)
modalities <- rbind(modalities,
c(y, val, t))
}
}
colnames(modalities) <- c("Year", "Value", "Modality")
modalities
future_value(10000,0.05, 1)
modalities <- as.data.frame(matrix(ncol = 3, nrow = 0))
types = c("No Contribution", "Fixed Contribution", "Growing Contribution")
for (y in 0:10) {
fv = future_value(10000,0.05, y)
for (i in 1:3) {
t <- types[i]
val <- switch(i,
fv,
fv + annuity(2000, 0.05, y),
fv + growing_annuity(2000, 0.05, 0.02, y)
)
print(val)
modalities <- rbind(modalities,
c(y, val, t))
}
}
colnames(modalities) <- c("Year", "Value", "Modality")
modalities <- data.frame(Year=0, Value=0, Modality='HI')
types = c("No Contribution", "Fixed Contribution", "Growing Contribution")
for (y in 0:10) {
fv = future_value(10000,0.05, y)
for (i in 1:3) {
t <- types[i]
val <- switch(i,
fv,
fv + annuity(2000, 0.05, y),
fv + growing_annuity(2000, 0.05, 0.02, y)
)
print(val)
modalities <- rbind(modalities,
c(y, val, t))
}
}
modalities <- modalities[2:nrow(modalities),]
modalities
modalities <- data.frame(Year=0, Value=0, Modality='HI')
types = c("No Contribution", "Fixed Contribution", "Growing Contribution")
for (y in 0:10) {
fv = future_value(10000,0.05, y)
for (i in 1:3) {
t <- types[i]
val <- switch(i,
fv,
fv + annuity(2000, 0.05, y),
fv + growing_annuity(2000, 0.05, 0.02, y)
)
print(t)
modalities <- rbind(modalities,
c(y, val, t))
}
}
modalities <- modalities[2:nrow(modalities),]
modalities
modalities <- data.frame(Year=0, Value=0, Modality='HI')
rbind(modalities, c(1, 2, 'HI'))
rbind(modalities, c(1, 2, 'H3'))
modalities <- data.frame(Year=0, Value=0, Modality='HI', stringsAsFactors=F)
types = c("No Contribution", "Fixed Contribution", "Growing Contribution")
for (y in 0:10) {
fv = future_value(10000,0.05, y)
for (i in 1:3) {
t <- types[i]
val <- switch(i,
fv,
fv + annuity(2000, 0.05, y),
fv + growing_annuity(2000, 0.05, 0.02, y)
)
print(t)
modalities <- rbind(modalities,
c(y, val, t))
}
}
modalities <- modalities[2:nrow(modalities),]
modalities
runApp('Workspace/stat133/Workout2')
modalities <- data.frame(Year=0, Value=0, Modality='HI', stringsAsFactors=F)
types = c("No Contribution", "Fixed Contribution", "Growing Contribution")
for (y in 0:10) {
fv = future_value(10000,0.05, y)
for (i in 1:3) {
t <- types[i]
val <- switch(i,
fv,
fv + annuity(2000, 0.05, y),
fv + growing_annuity(2000, 0.05, 0.02, y)
)
modalities <- rbind(modalities,
c(y, val, t))
}
}
modalities <- modalities[2:nrow(modalities),]
modalities
modalities$Year
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
runApp('Workspace/stat133/Workout2')
rsconnect::setAccountInfo(name='domfj', token='2C99F37454965A548CE541AB56CBF52E', secret='KlbUhx5i2Pqd6tbLSBDbGpw7KsXyH9SziHlVJ2pz')
